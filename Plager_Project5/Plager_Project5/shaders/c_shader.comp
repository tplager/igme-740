#version 430 compatibility

#define EPSILON 0.00001
#define INFINITY_FLT 1000000.0

struct Light {
	vec3 pos; 
	vec3 color; 
	float intensity; 
};

struct Box {
	vec3 min;
	vec3 max;
	mat4 rot; 
	mat4 invRot; 

	vec3 color; 
  
	float ambient; 
	float diffuse; 
	float phong; 
};

struct Sphere {
	vec3 pos; 
	float rad;

	vec3 color; 
  
	float ambient; 
	float diffuse; 
	float phong; 
};

struct Ray {
	vec3 origin; 
	vec3 direction; 
	vec3 at(float t) {
		return origin + direction * t;
	}
};

struct RayHit {
	float tNear; 
	Sphere sphere; 
	Box box; 
	bool isSphere; 
};

uniform vec3 eye;
uniform float nearPlane; 
uniform float camAngle; 

uniform int viewportWidth; 
uniform int viewportHeight;

uniform Light sceneLight; 

uniform Sphere spheres[2]; 

uniform Box boxes[2]; 

layout(rgba32f, binding = 0) uniform image2D framebuffer;

layout(local_size_x = 1, local_size_y = 1) in;

// Reference: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection
bool solveQuadratic(const float a, const float b, const float c, float x0, float x1) 
{ 
    float discr = b * b - 4 * a * c; 
    if (discr < 0) return false; 
    else if (discr == 0) x0 = x1 = - 0.5 * b / a; 
    else { 
        float q = (b > 0) ? 
            -0.5 * (b + sqrt(discr)) : 
            -0.5 * (b - sqrt(discr)); 
        x0 = q / a; 
        x1 = c / q; 
    } 
    if (x0 > x1) {
		float tempBuffer = x0; 
		x0 = x1; 
		x1 = x0; 
	}
 
    return true; 
} 

bool raySphereIntersection(Ray ray, Sphere sphere, out float tNear) {
	float t0, t1; // solutions for t if the ray intersects 

	vec3 oc = ray.origin - sphere.pos;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc,oc) - sphere.rad*sphere.rad;

    if (!solveQuadratic(a, b, c, t0, t1)) 
		return false; 

	if (t0 < 0) { 
        t0 = t1; // if t0 is negative, let's use t1 instead 
        if (t0 < 0) 
			return false; // both t0 and t1 are negative 
    } 

	tNear = t0; 

	return true; 
}

bool rayBoxIntersection(Ray ray, Box box) {
    float tmin = (box.min.x - ray.origin.x) / ray.direction.x; 
    float tmax = (box.max.x - ray.origin.x) / ray.direction.x; 
 
    if (tmin > tmax) {
		float tempBuffer = tmin; 
		tmin = tmax; 
		tmax = tempBuffer; 
	}
 
    float tymin = (box.min.y - ray.origin.y) / ray.direction.y; 
    float tymax = (box.max.y - ray.origin.y) / ray.direction.y; 
 
    if (tymin > tymax) {
		float tempBuffer = tymin; 
		tymin = tymax; 
		tymax = tempBuffer;
	}
 
    if ((tmin > tymax) || (tymin > tmax)) 
        return false; 
 
    if (tymin > tmin) 
        tmin = tymin; 
 
    if (tymax < tmax) 
        tmax = tymax; 
 
    float tzmin = (box.min.z - ray.origin.z) / ray.direction.z; 
    float tzmax = (box.max.z - ray.origin.z) / ray.direction.z; 
 
    if (tzmin > tzmax) {
		float tempBuffer = tzmin; 
		tzmin = tzmax; 
		tzmax = tempBuffer;	}
 
    if ((tmin > tzmax) || (tzmin > tmax)) 
        return false; 
 
    if (tzmin > tmin) 
        tmin = tzmin; 
 
    if (tzmax < tmax) 
        tmax = tzmax; 
 
    return true; 	
}

bool trace(Ray ray, out RayHit hit) {
	
	bool intersects = false; 

	float tNear = INFINITY_FLT;

	// Sphere Intersection
	for (int i = 0; i < 2; i++) {
		float tNearK = INFINITY_FLT - EPSILON; 
		if (raySphereIntersection(ray, spheres[i], tNearK) && tNearK < tNear) {
			hit.isSphere = true; 
			hit.sphere = spheres[i]; 
			hit.tNear = tNearK; 
			intersects = true; 
		}
	}

	// Box Intersection
//	for (int i = 0; i < 2; i++) {
//	
//	}

	return intersects; 
}

vec4 rayCast(Ray ray) {
	// base pixel colour for image
	vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);

	RayHit hit; 
	if (trace(ray, hit)) {
		vec3 hitPoint = ray.origin + ray.direction * hit.tNear; 
		vec3 normal; 
		
		if (hit.isSphere) {
			normal = normalize(hitPoint - hit.sphere.pos);
			
			pixel.rgb = hit.sphere.color; 
		}

		else {
			pixel.rgb = hit.box.color; 
		}

		vec3 lightRay = hitPoint - sceneLight.pos; 
		float lightRayDotLight = dot(lightRay, lightRay); 
		lightRay = normalize(lightRay); 
		
		vec3 shadowOrigin; 
		if (dot(ray.direction, normal) < 0) {
			shadowOrigin = hitPoint + normal * EPSILON; 
		}
		else {
			shadowOrigin = hitPoint - normal * EPSILON; 
		}

		Ray shadow = Ray(shadowOrigin, -lightRay); 
		RayHit shadowHit; 
		
		if (trace(shadow, shadowHit) && shadowHit.tNear * shadowHit.tNear < lightRayDotLight) {
			return vec4(0,0,0,1); 
		}

//		float ambient = hit.sphere.ambient; 
//		float diffuse = sceneLight.intensity * hit.sphere.diffuse * dot(normal, -lightRay); 
//		float spec = sceneLight.intensity * hit.sphere.phong * pow(max(0.0, dot(reflect(lightRay, normal), -ray.direction)), 50); 
//		pixel.rgb = (ambient + diffuse) * sceneLight.color * hit.sphere.color + spec * sceneLight.color;
	}

	return pixel;
}

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 pos = ivec2(pixelCoords.x, viewportHeight - pixelCoords.y); 

	// Normalizing using frame's dimensions
	vec2 ndCoord = pos + (0.5, 0.5);
	ndCoord.x /= float(viewportWidth); 
	ndCoord.y /= float(viewportHeight); 

	// Centering around origin
	vec2 pixScreen; 
	pixScreen.x = 2 * ndCoord.x - 1; 
	pixScreen.y = 1 - 2 * ndCoord.y; 

	float aspectRatio = viewportHeight/viewportHeight; 

	// Converting to Camera-space
	vec2 pixCamera; 
	pixCamera.x = pixScreen.x * aspectRatio * tan(camAngle / 2); 
	pixCamera.y = pixScreen.y * tan(camAngle / 2); 

	// Calculating direction and normalizing
	vec3 rayDirection = normalize(vec3(pixCamera.x, pixCamera.y, -nearPlane)); 

	vec4 color = rayCast(Ray(eye, rayDirection)); 

//	if (pixelCoords.y < viewportHeight/2) {
//		color.rgb = vec3(0.0, 0.0, 1.0);
//	}

	imageStore(framebuffer, pixelCoords, color);
}
